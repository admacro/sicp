'''
E 1.9
Iterative and recursive
'''

# Recursive process
def factorial_recur(n):
    return 1 if (n == 1) else n * factorial_recur(n - 1)

# Iterative process
def factorial_iter(n):
    def fact_iter(counter, product):
        return product if (counter > n) else fact_iter(counter + 1, counter * product)
    return fact_iter(1, 1)

print(factorial_recur(5))
print(factorial_iter(6))
'''
substitution model illustration
I used add and plus (instead of +) to distinguish the two adding procedures 
and the default + operator
'''
def add(a, b):
    print("add(" + str(a) + ", " + str(b) + ")")
    return b if (a == 0) else inc(add(dec(a), b))
        
def plus(a, b):
    print("plus(" + str(a) + ", " + str(b) + ")")
    return b if (a == 0) else plus(dec(a), inc(b))

def inc(x): return x + 1
def dec(x): return x - 1

add(4, 5)
plus(4, 5)

'''
process generated by add(4, 5)
As you can see from the steps below, inc operations are deffered,
this is recursive process. And it's linear.

add(4, 5)
inc(add(dec(4), 5))
inc(add(3, 5))
inc(inc(add(dec(3), 5)))
inc(inc(add(2, 5)))
inc(inc(inc(add(dec(2), 5))))
inc(inc(inc(add(1, 5))))
inc(inc(inc(inc(add(dec(1), 5)))))
inc(inc(inc(inc(add(0, 5)))))
inc(inc(inc(inc(5))))
inc(inc(inc(6)))
inc(inc(7))
inc(8)
9
'''

'''
process generated by plus(4, 5)
As you can see from the steps below, each state of the process can be summarized 
by the state variables, this is iterative process. And it's linear.

plus(4, 5)
plus(dec(4), inc(5))
plus(3, 6)
plus(dec(3), inc(6))
plus(2, 7)
plus(dec(2), inc(7))
plus(1, 8)
plus(dec(1), inc(8))
plus(0, 9)
9
'''

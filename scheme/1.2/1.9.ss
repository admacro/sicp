; E 1.9
; Linear recursion and iteration

; Recursive process
(define (factorial-recur n) 
    (if (= n 1)
        1
        (* n (factorial-recur (- n 1)))))

; Iterative process
(define (factorial-iter n)
    (define (fact-iter counter product)
        (if (> counter n)
            product
            (fact-iter (+ counter 1) (* counter product))))
    (fact-iter 1 1))
 
; substitution model illustration
; I used add and plus (instead of +) to distinguish the two adding procedures 
; and the default + operator
(define (add a b)
    (if (= a 0) 
        b
        (inc (add (dec a) b))))
        
(define (plus a b)
    (if (= a 0) 
       b
       (plus (dec a) (inc b))))

(define (inc x) (+ x 1))
(define (dec x) (- x 1))

; process generated by (add 4 5)
; As you can see from the steps below, inc operations are deffered,
; this is recursive process. And it's linear.
; (add 4 5)
; (inc (add (dec 4) 5))
; (inc (add 3 5))
; (inc (inc (add (dec 3) 5)))
; (inc (inc (add 2 5)))
; (inc (inc (inc (add (dec 2) 5))))
; (inc (inc (inc (add 1 5))))
; (inc (inc (inc (inc (add (dec 1) 5)))))
; (inc (inc (inc (inc (add 0 5)))))
; (inc (inc (inc (inc 5))))
; (inc (inc (inc 6)))
; (inc (inc 7))
; (inc 8)
; 9

; process generated by (plus 4 5)
; As you can see from the steps below, each state of the process can be summarized 
; by the state variables, this is iterative process. And it's linear.
; (plus 4 5)
; (plus (dec 4) (inc 5))
; (plus 3 6)
; (plus (dec 3) (inc 6))
; (plus 2 7)
; (plus (dec 2) (inc 7))
; (plus 1 8)
; (plus (dec 1) (inc 8))
; (plus 0 9)
; 9
